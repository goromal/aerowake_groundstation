<launch>
<!-- ======================= LAYOUT & COMMS SWITCHES ======================= -->
<!-- (true) for simulation flight or (false) for hardware flight -->
<arg name="sim"/>
<!--                 Odroid-in-the-loop (true/false) -->
<arg if="$(arg sim)" name="oil"/>
<!--                 Ethernet-based OIL (true) or WiFi (false) -->
<arg if="$(arg oil)" name="wired"/>
<!-- ======================== SENSOR FUSION SWITCHES ======================= -->
<!-- (false) for outdoor flight or (true) for motion-capture room flight -->
<arg name="indoor"/>
<!--                    (true) for sensor spoofing or (false) for pure mocap -->
<arg if="$(arg indoor)" name="spoof"/>
<!-- =========================== PARAMETER FILES =========================== -->
<arg name="sim_param"           default="ukf_investigation"/>
<!-- <arg name="sim_param"           default="abs_nonoise"/> -->
<arg name="rf_param"            default="RF5_2020"/>
<arg name="mocap_abs_ekf_param" default="mit-uav-mocap"/>
<arg name="abs_ekf_param"       default="mit-roof-cart-absolute"/>
<arg name="mocap_rel_ekf_param" default="rel-mit-uav-mocap"/>
<arg name="rel_ekf_param"       default="mit-roof-cart-relative"/>
<arg name="mission_param"       default="sim"/>
<!-- ======================================================================= -->

<!-- Counter-Args -->
<arg name="hardware" default="$(eval not arg('sim'))"/>
<arg name="outdoor" default="$(eval not arg('indoor'))"/>
<arg if="$(arg indoor)" name="mocap" default="$(eval not arg('spoof'))"/>
<arg if="$(arg sim)"    name="x64sim" default="$(eval not arg('oil'))"/>
<arg if="$(eval arg('sim') and arg('oil'))" name="wifi" default="$(eval not arg('wired'))"/>

<!-- Parameter Files -->
<arg name="sim_paramfile"     default="$(find aerowake_params)/params/sim/$(arg sim_param).yaml"/>
<arg if="$(arg outdoor)"                         name="a_ekf_param" default="$(arg abs_ekf_param)"/>
<arg if="$(eval arg('indoor') and arg('spoof'))" name="a_ekf_param" default="$(arg abs_ekf_param)"/>
<arg if="$(eval arg('indoor') and arg('mocap'))" name="a_ekf_param" default="$(arg mocap_abs_ekf_param)"/>
<arg name="abs_ekf_paramfile" default="$(find aerowake_params)/params/ekf/$(arg a_ekf_param).yaml"/>
<arg if="$(arg outdoor)"                         name="r_ekf_param" default="$(arg rel_ekf_param)"/>
<arg if="$(eval arg('indoor') and arg('spoof'))" name="r_ekf_param" default="$(arg rel_ekf_param)"/>
<arg if="$(eval arg('indoor') and arg('mocap'))" name="r_ekf_param" default="$(arg mocap_rel_ekf_param)"/>
<arg name="rel_ekf_paramfile" default="$(find aerowake_params)/params/ekf/$(arg r_ekf_param).yaml"/>
<arg name="mission_paramfile" default="$(find aerowake_params)/params/mission/$(arg mission_param).yaml"/>
<arg name="rf_paramfile"      default="$(find aerowake_params)/params/$(arg rf_param).yml"/>

<!-- ==== LOAD SHIP-SIDE SENSORS ==== -->

<!-- Ship GPS Unit -->
<group if="$(eval arg('outdoor') and arg('hardware'))">
  <node pkg="ublox_gps" type="ublox_gps" name="base" output="screen">
    <param name="device" value="/dev/base"/>
    <rosparam command="load" file="$(find ublox_gps)/config/MB.yaml"/>
    <rosparam command="load" file="$(find ublox_gps)/config/Base_MB.yaml"/>
  </node>
</group>
<group if="$(eval arg('outdoor') and arg('sim'))">
  <node pkg="ublox_gps" type="ublox_gps_sim.py" name="base" output="screen">
    <rosparam command="load" file="$(arg sim_paramfile)"/>
    <rosparam command="load" file="$(find ublox_gps)/config/MB.yaml"/>
    <rosparam command="load" file="$(find ublox_gps)/config/Base_MB.yaml"/>
    <remap from="truth" to="boat_truth_NED"/>
  </node>
</group>
<group if="$(eval arg('indoor') and arg('spoof'))">
  <node pkg="ublox_gps" type="ublox_gps_spoofer.py" name="base" output="screen">
    <rosparam command="load" file="$(arg abs_ekf_paramfile)"/>
    <rosparam command="load" file="$(arg sim_paramfile)"/>
    <rosparam command="load" file="$(find ublox_gps)/config/MB.yaml"/>
    <rosparam command="load" file="$(find ublox_gps)/config/Base_MB.yaml"/>
    <remap from="mocap" to="aerowake_beacons_small/world"/>
    <remap from="mocap_vel" to="aerowake_beacons_small/mocap/twist"/>
  </node>
</group>

<!-- Ship Compass -->
<group if="$(eval arg('outdoor') and arg('hardware'))">
  <!-- ++++ TODO REMAINS TO BE SEEN ++++ -->
</group>
<group if="$(eval arg('outdoor') and arg('sim'))">
  <node pkg="compass_driver" type="compass_sim.py" name="base_compass" output="screen">
    <rosparam command="load" file="$(arg sim_paramfile)"/>
    <remap from="mag" to="ship_mag"/>
    <remap from="truth" to="boat_truth_NED"/>
  </node>
</group>
<group if="$(eval arg('indoor') and arg('spoof'))">
  <node pkg="compass_driver" type="compass_spoofer.py" name="base_compass" output="screen">
    <rosparam command="load" file="$(arg sim_paramfile)"/>
    <remap from="mag" to="ship_mag"/>
    <remap from="mocap" to="aerowake_beacons_small/world"/>
  </node>
</group>

<!-- ==== TETHER REEL CONTROLLER ==== -->

<node name="tether_reel_controller" pkg="aerowake_groundstation" type="tether_reel_controller.py" output="screen">
  <rosparam command="load" file="$(arg mission_paramfile)"/>
  <param name="sim" value="$(arg sim)"/>
</node>

<!-- ==== LOAD MISSION GUI/CONTROL NODES ==== -->

<!-- automatic RC control in sim -->
<group if="$(arg sim)">
  <node name="automatic_armer" pkg="aerowake_utils" type="automatic_rc.py" output="screen">
    <param name="rosflight_paramfile" value="$(arg rf_paramfile)"/>
    <param name="wait_secs" value="9.0"/>
  </node>
</group>

<!-- automatic mission service calls in sim -->
<group if="$(arg sim)">
  <node name="mission_control" pkg="aerowake_groundstation" type="benchmark_mission.py" output="screen"/>
</group>

<!-- Ground Station GUI -->
<!-- ++++ TODO ++++ -->

</launch>
